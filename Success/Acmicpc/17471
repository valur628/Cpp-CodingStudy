#include <iostream>
#include <vector>
#include <string.h>
#include <math.h>
#include <queue>
using namespace std;

int n,
    x = 0, y = 0, cost = 0, answer = 123456789,
    pop[11], nodeA[11], nodeB[11],
    map[11][11];

queue<int> que;
vector<int> vec;

int bfs(bool b)
{
    memset(nodeB, 0, sizeof(nodeB));
    int start = 0, cost = 1;
    for (int i = 1;i<=n;i++)
        if(nodeA[i] == b)
        {
            start = i;
            break;
        }
    nodeB[start] = 1;
    que.push(start);
    while(que.empty() == 0)
    {
        int q2 = que.front();
        que.pop();
        for (int i = 1;i<=n;i++)
        {
            if(map[q2][i] == 1 && nodeA[i] == b && nodeB[i] == 0)
            {
                nodeB[i] = 1;
                que.push(i);
                cost++;
            }
        }  
    }
    if(b == 1 && cost == x)
        return 1;
    if(b == 0 && cost == y)
        return 1;
    return 0;
}

void search(int s, int c)
{
    if(c > n)
        return;
    if(c >= 1)
    {
        x = 0;
        for (int i = 1 ; i<=n ; i++)
            if(nodeA[i] == 1)
                x++;
        y = n - x;
        bool true_bfs = bfs(true);
        bool false_bfs = bfs(false);
        if(true_bfs == true && false_bfs == true)
        {
            int sum1 = 0, sum2 = 0;
            for (int i = 1 ; i<=n ; i++)
                if(nodeA[i] == 1)
                    sum1 += pop[i];
                else
                    sum2 += pop[i];
            if(answer >= abs(sum1 - sum2))
                answer = abs(sum1 - sum2);
        }
    }
    for (int i = s ; i<=n ; i++)
        if(nodeA[i] == 0)
        {
            nodeA[i] = 1;
            search(i, c+1);
            nodeA[i] = 0;
        }
}

int main(void)
{
    int r, t;
    cin >> n;
    for (int i = 1 ; i<=n ; i++){cin >> pop[i];}
    memset(map, 0, sizeof(map));
    memset(nodeA, 0, sizeof(nodeA));
    memset(nodeB, 0, sizeof(nodeB));
    for (int i = 1 ; i<=n ; i++)
    {
        cin >> r;
        for (int j = 0; j<r ; j++)
        {
            cin >> t;
            map[t][i] = 1, map[i][t] = 1;
        }
    }
    search(1,0);
    if(answer == 123456789)
        answer = -1;
    cout << answer;
}