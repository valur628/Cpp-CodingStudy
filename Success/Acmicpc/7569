#include <iostream>
#include <queue>
using namespace std;

int m, n, h, x, y, z, count = 0, answer = 1, tomato[100][100][100], check[100][100][100], dx[6] = { -1, 1, 0, 0, 0, 0}, dy[6] = { 0, 0, -1, 1, 0, 0}, dz[6] = { 0, 0, 0, 0, -1, 1};

struct pos{
    int x, y, z;
};
queue<pos> q;

int bfs()
{
    while(q.empty() == 0)
    {
        int q_Size = q.size();
        for (int i = 0;i<q_Size; i++)
        {
            pos q_Front = q.front();
            q.pop();
            x = q_Front.x, y = q_Front.y, z = q_Front.z;
            if(check[x][y][z] == 1)
                continue;
            else
                check[x][y][z] = 1;
            
            for(int j = 0;j < 6; j++)
            {
                int px = x + dx[j], py = y + dy[j], pz = z + dz[j];

                if (px < 0 || px >= h || py < 0 || py >= n ||  pz < 0 || pz >= m || tomato[px][py][pz] == -1)
                    continue;
                if (tomato[px][py][pz] == 0)
                {
                    q.push({px, py, pz});
                    tomato[px][py][pz] = 1;
                    count--;
                }
                if (count == 0 && answer == 1)
                    return 0;
                else if (count == 0)
                    return answer;
            }
        }
        answer++;
    }
    return -1;
}    

int main(void)
{
    cin >> m >> n >> h; //m = x, n = y, z = h
    for (int i = 0; i< h; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0 ; k < m ; k++)
            {
                cin >> tomato[i][j][k];
                if(tomato[i][j][k] == 0)
                    count++;
                else if(tomato[i][j][k] == 1)
                    q.push({i,j,k});
            }
    cout << bfs();
}